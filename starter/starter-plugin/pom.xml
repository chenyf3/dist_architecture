<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.xpay</groupId>
        <artifactId>common-parent</artifactId>
        <version>1.0-Release</version>
    </parent>

    <artifactId>starter-plugin</artifactId>
    <packaging>jar</packaging>
    <description>各种组件的starter</description>

    <dependencies>
        <!-- SpringBoot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency> <!-- 引入log4j2依赖，代表使用log4j2 -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- SpringBoot -->

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- RocketMQ -->
        <dependency>
            <groupId>org.apache.rocketmq</groupId>
            <artifactId>rocketmq-spring-boot-starter</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- RocketMQ -->
        
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>

        <!-- ActiveMQ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-activemq</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.messaginghub</groupId>
            <artifactId>pooled-jms</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- ActiveMQ -->

        <!-- RabbitMQ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- RabbitMQ -->

        <!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency> <!-- 使用 jedis 客户端时引入 -->
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency> <!-- 使用 lettuce 客户端时引入 -->
            <groupId>io.lettuce</groupId>
            <artifactId>lettuce-core</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency> <!-- 使用 redisson 客户端时引入 -->
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- redis -->

        <!-- redis lock -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- redis lock -->

        <!-- zookeeper -->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- zookeeper -->

        <!-- elasticsearch -->
        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- elasticsearch -->

        <!-- java mail -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- java mail -->

        <!-- fastdfs -->
        <dependency>
            <groupId>com.xpay</groupId>
            <artifactId>lib-fastdfs-client</artifactId>
            <version>${fastdfs-client.version}</version>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- fsatdfs -->

        <!-- minio对象存储 -->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- minio对象存储 -->

        <!-- 阿里云OSS对象存储 -->
        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>
        <!-- 阿里云OSS对象存储 -->

        <!-- common-statics -->
        <dependency>
            <groupId>com.xpay</groupId>
            <artifactId>common-statics</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- common-statics -->

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
    </dependencies>
</project>